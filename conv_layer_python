"""
def convolution2d(image, kernel):
    m, n = kernel.shape
    if (m == n):
        y, x = image.shape
        y = y - m + 1
        x = x - m + 1
        new_image = np.zeros((y,x))
        for i in range(y):
            for j in range(x):
                new_image[i][j] = np.sum(image[i:i+m, j:j+m]*kernel)
    return new_image
"""

def convolution2d(image, kernel, stride, padding):
    image = np.pad(image, [(padding, padding), (padding, padding)], mode='constant', constant_values=0) # image'e padding yapmak için
    print (image)

    kernel_height, kernel_width = kernel.shape   # filtrenin boyutları kernel_height ve kernel_width 'e atanır
    padded_height, padded_width = image.shape    # image'in padded yapıldıktan sonraki boyutları padded_height ve padded_width 'e atanır

    output_height = (padded_height - kernel_height) // stride + 1    # output_height hesaplanır
    output_width = (padded_width - kernel_width) // stride + 1       # output_width hesaplanır

    new_image = np.zeros((output_height, output_width)).astype(np.float32)    # 2 boyutlu new_image arrayi oluşturulur

    for y in range(0, output_height):
        for x in range(0, output_width):
            # new_image hesaplaması yapılır
            # 
            new_image[y][x] = np.sum(image[y * stride:y * stride + kernel_height, x * stride:x * stride + kernel_width] * kernel).astype(np.float32)
    return new_image


import numpy as np

# Creates a list containing 5 lists, each of 8 items, all set to 0
w, h = 3, 3
out = [[0 for x in range(w)] for y in range(h)] 


inp = np.array([[2, 3, 5, 7, 11],
        [12, 8, 4, 6, 1],
        [9, 7, 5, 0, 13],
        [1, 3, 2, 6, 5],
        [4, 6, 8, 8, 1]])

filtre = np.array([[1, 3, 5],
          [2, 7, 6],
          [9, 3, 1]])

# padding = 0, stride = 1, activation func = yok, bias = yok


print(convolution2d(inp, filtre, 2, 1))
print(out)

print(np.sum(inp[1 * 1:1 * 1 + 3, 2 * 1:2 * 1 + 3] * filtre))
